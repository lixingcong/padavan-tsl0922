diff --git a/src/Makefile b/src/Makefile
index 0a62ebd..2318180 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -13,7 +13,7 @@ CFLAGS += -Wall
 HEADERS = minivtun.h library.h list.h jhash.h
 
 minivtun: minivtun.o library.o server.o client.o
-	$(CC) $(LDFLAGS) -o $@ $^ -lcrypto
+	$(CC) $(LDFLAGS) -o $@ $^
 
 %.o: %.c $(HEADERS)
 	$(CC) $(CFLAGS) -c -o $@ $<
diff --git a/src/library.c b/src/library.c
index 84b49d5..635bad4 100644
--- a/src/library.c
+++ b/src/library.c
@@ -1,4 +1,4 @@
-/*
+ï»¿/*
  * Copyright (c) 2015 Justin Liu
  * Author: Justin Liu <rssnsj@gmail.com>
  * https://github.com/rssnsj/minivtun
@@ -13,23 +13,30 @@
 #include <signal.h>
 #include <sys/socket.h>
 #include <sys/ioctl.h>
+#ifdef ENABLE_OPENSSL
 #include <openssl/evp.h>
 #include <openssl/md5.h>
+#else
+#include "jhash.h"
+#endif
 #include <net/route.h>
 
 #include "library.h"
 
 struct name_cipher_pair cipher_pairs[] = {
+#ifdef ENABLE_OPENSSL
 	{ "aes-128", EVP_aes_128_cbc, },
 	{ "aes-256", EVP_aes_256_cbc, },
 	{ "des", EVP_des_cbc, },
 	{ "desx", EVP_desx_cbc, },
 	{ "rc4", EVP_rc4, },
+#endif
 	{ NULL, NULL, },
 };
 
 const void *get_crypto_type(const char *name)
 {
+#ifdef ENABLE_OPENSSL
 	const EVP_CIPHER *cipher = NULL;
 	int i;
 
@@ -47,14 +54,19 @@ const void *get_crypto_type(const char *name)
 	} else {
 		return NULL;
 	}
+#else
+	return NULL;
+#endif
 }
 
+#ifdef ENABLE_OPENSSL
 static const char crypto_ivec_initdata[CRYPTO_MAX_BLOCK_SIZE] = {
 	0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90,
 	0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90,
 	0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90,
 	0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90,
 };
+#endif
 
 #define CRYPTO_DATA_PADDING(data, dlen, bs) \
 	do { \
@@ -69,6 +81,7 @@ static const char crypto_ivec_initdata[CRYPTO_MAX_BLOCK_SIZE] = {
 void datagram_encrypt(const void *key, const void *cptype, void *in,
 		void *out, size_t *dlen)
 {
+#ifdef ENABLE_OPENSSL
 	size_t iv_len = EVP_CIPHER_iv_length((const EVP_CIPHER *)cptype);
 	EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
 	unsigned char iv[CRYPTO_MAX_KEY_SIZE];
@@ -88,11 +101,20 @@ void datagram_encrypt(const void *key, const void *cptype, void *in,
 	EVP_CIPHER_CTX_free(ctx);
 
 	*dlen = (size_t)(outl + outl2);
+#else
+	size_t i = 0;
+	unsigned char* pIn=in;
+	unsigned char* pOut=out;
+	const unsigned char* pKey=key;
+	for(; i < *dlen; ++i)
+		*(pOut++) = *(pIn++) ^ pKey[i % CRYPTO_MAX_KEY_SIZE];
+#endif
 }
 
 void datagram_decrypt(const void *key, const void *cptype, void *in,
 		void *out, size_t *dlen)
 {
+#ifdef ENABLE_OPENSSL
 	size_t iv_len = EVP_CIPHER_iv_length((const EVP_CIPHER *)cptype);
 	EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
 	unsigned char iv[CRYPTO_MAX_KEY_SIZE];
@@ -112,10 +134,14 @@ void datagram_decrypt(const void *key, const void *cptype, void *in,
 	EVP_CIPHER_CTX_free(ctx);
 
 	*dlen = (size_t)(outl + outl2);
+#else
+	datagram_encrypt(key, cptype, in, out, dlen);
+#endif
 }
 
 void fill_with_string_md5sum(const char *in, void *out, size_t outlen)
 {
+#ifdef ENABLE_OPENSSL
 	char *outp = out, *oute = outp + outlen;
 	MD5_CTX ctx;
 
@@ -128,6 +154,20 @@ void fill_with_string_md5sum(const char *in, void *out, size_t outlen)
 		size_t bs = (oute - outp >= 16) ? 16 : (oute - outp);
 		memcpy(outp, out, bs);
 	}
+#else
+	uint32_t loopCount = outlen / sizeof(uint32_t);
+	uint32_t* pOut32 = out;
+	uint32_t hashVal = JHASH_INITVAL;
+
+	memset(out, 0xff, outlen);
+	memcpy(out, in, strlen(in));
+
+	while(loopCount--){
+		*pOut32=jhash_1word(*pOut32, hashVal);
+		++pOut32;
+		++hashVal;
+	}
+#endif
 }
 
 /* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */
diff --git a/src/minivtun.c b/src/minivtun.c
index 6e88304..af749dc 100644
--- a/src/minivtun.c
+++ b/src/minivtun.c
@@ -146,9 +146,14 @@ static void parse_virtual_route(const char *arg)
 
 static void print_help(int argc, char *argv[])
 {
+#ifdef ENABLE_OPENSSL
 	int i;
+#endif
 
 	printf("Mini virtual tunneller in non-standard protocol.\n");
+#ifndef ENABLE_OPENSSL
+	printf("Warning: This patched version use a weak cipher. Use at your own risk.\n");
+#endif
 	printf("Usage:\n");
 	printf("  %s [options]\n", argv[0]);
 	printf("Options:\n");
@@ -164,7 +169,9 @@ static void print_help(int argc, char *argv[])
 	printf("  -p, --pidfile <pid_file>            PID file of the daemon\n");
 	printf("  -E, --tap                           TAP mode\n");
 	printf("  -e, --key <encryption_key>          shared password for data encryption\n");
+#ifdef ENABLE_OPENSSL
 	printf("  -t, --type <encryption_type>        encryption type\n");
+#endif
 	printf("  -v, --route <network/prefix>[=gw]   attached IPv4/IPv6 route on this link, can be multiple\n");
 	printf("  -w, --wait-dns                      wait for DNS resolve ready after service started\n");
 	printf("  -D, --dynamic-link                  dynamic link mode, not bring up until data received\n");
@@ -179,18 +186,22 @@ static void print_help(int argc, char *argv[])
 	printf("  -P, --max-droprate <1~100>          maximum allowed packet drop percentage, default: %u%%\n", config.max_droprate);
 	printf("  -X, --max-rtt <N>                   maximum allowed echo delay (ms), default: unlimited\n");
 	printf("  -h, --help                          print this help\n");
+#ifdef ENABLE_OPENSSL
 	printf("Supported encryption algorithms:\n");
 	printf("  ");
 	for (i = 0; cipher_pairs[i].name; i++)
 		printf("%s, ", cipher_pairs[i].name);
 	printf("\n");
+#endif
 }
 
 int main(int argc, char *argv[])
 {
 	const char *tun_ip_config = NULL, *tun_ip6_config = NULL;
 	const char *loc_addr_pair = NULL, *peer_addr_pair = NULL;
+#ifdef ENABLE_OPENSSL
 	const char *crypto_type = CRYPTO_DEFAULT_ALGORITHM;
+#endif
 	int override_mtu = 0, opt;
 	struct timeval current;
 	char *sp;
@@ -262,9 +273,11 @@ int main(int argc, char *argv[])
 		case 'e':
 			config.crypto_passwd = optarg;
 			break;
+#ifdef ENABLE_OPENSSL
 		case 't':
 			crypto_type = optarg;
 			break;
+#endif
 		case 'v':
 			parse_virtual_route(optarg);
 			break;
@@ -423,10 +436,12 @@ int main(int argc, char *argv[])
 
 	if (enabled_encryption()) {
 		fill_with_string_md5sum(config.crypto_passwd, config.crypto_key, CRYPTO_MAX_KEY_SIZE);
+#ifdef ENABLE_OPENSSL
 		if ((config.crypto_type = get_crypto_type(crypto_type)) == NULL) {
 			fprintf(stderr, "*** No such encryption type defined: %s.\n", crypto_type);
 			exit(1);
 		}
+#endif
 	} else {
 		memset(config.crypto_key, 0x0, CRYPTO_MAX_KEY_SIZE);
 		fprintf(stderr, "*** WARNING: Transmission will not be encrypted.\n");
